// SPDX-License-Identifier: MIT

pragma solidity >=0.8.0 <0.9.0;

import "@witnet/solidity/contracts/WitPriceFeeds.sol";$_importWitnetMocks

contract $_contractName
    is
        IWitOracleEvents
{
    using Witnet for Witnet.QuerySLA;

    WitOracle public immutable witOracle;
    WitPriceFeeds internal immutable __PFS;
    
    constructor ($_constructorParams) {
        require(
            address($_witnetAddress).code.length > 0
                && $_witnetAddress.specs() == type(IWitPriceFeeds).interfaceId,
            "$_contractName: uncompliant WitPriceFeeds appliance"
        );
        __PFS = $_witnetAddress;
        witOracle = __PFS.witOracle();
    }

    /// @dev See ERC-2362 as to understand how price feed captions are composed:
    function _erc2362FeedIdOf(string memory _caption)
        internal pure returns (bytes4)
    {
        return bytes4(keccak256(bytes(_caption)));
    }

    function _erc2362PriceFeedIdOf(
            string memory _base, 
            string memory _quote, 
            uint8 _decimals
        )
        internal pure returns (bytes4)
    {
        return bytes4(keccak256(abi.encodePacked(
            "Price-", 
            _base, "/", 
            _quote, "-", 
            _toString(_decimals)
        )));
    }

    /// @dev Convert a `uint8` into a 1, 2 or 3 characters long `string` representing its
    /// three less significant decimal values.
    function _toString(uint8 _u)
        internal pure
        returns (string memory)
    {
        if (_u < 10) {
            bytes memory b1 = new bytes(1);
            b1[0] = bytes1(uint8(_u) + 48);
            return string(b1);
        } else if (_u < 100) {
            bytes memory b2 = new bytes(2);
            b2[0] = bytes1(uint8(_u / 10) + 48);
            b2[1] = bytes1(uint8(_u % 10) + 48);
            return string(b2);
        } else {
            bytes memory b3 = new bytes(3);
            b3[0] = bytes1(uint8(_u / 100) + 48);
            b3[1] = bytes1(uint8(_u % 100 / 10) + 48);
            b3[2] = bytes1(uint8(_u % 10) + 48);
            return string(b3);
        }
    }

    /// ... Introspect the `WitPriceFeeds` ABI as to learn about 
    /// ... the methods under `__PFS` for checking the list of supported price feeds,
    /// ... as well as their current status, or timestamp and audit trail proofs for latest 
    /// ... updates as resolved by the Wit/Oracle blockhain, or even the actual data sources 
    /// ... and APIs being used under the hood for every supported price feed.
}
