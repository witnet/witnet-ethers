// SPDX-License-Identifier: MIT

pragma solidity >=0.8.0 <0.9.0;

import "@witnet/solidity/contracts/mockups/UsingWitRandomness.sol";$_importWitnetMocks

contract $_contractName
    is
        UsingWitRandomness
{
    using Witnet for Witnet.QuerySLA;

    constructor ($_constructorParams) 
        UsingWitRandomness($_witnetAddress)
    {
        /// ...
    }
    
    /// ... Introspect the `WitRandomness` appliance interface to learn 
    /// ... about the public methods at your disposal via `__RNG` for pulling
    /// ... unmalleable randomness from the Wit/Oracle blockchain.

    /// ...

 
    // ========================================================================
    // --- Internal helper methods: Random extractions with/without repetitions

    function _randomExtractionWithReps(
            uint32  _range, 
            uint32  _extractions, 
            bytes32 _seed
        )
        internal pure
        returns (uint32[] memory _extraction)
    {
        unchecked {
            _extraction = new uint32[](_extractions);
            for (uint32 _ix = 0; _ix < _extractions; _ix ++) {
                _extraction[_ix] = Witnet.randomUniformUint32(
                    _range, 
                    _ix, 
                    _seed
                );
            }
        }
    }

    function _randomExtractionNoReps(
            uint32  _range, 
            uint32  _extractions, 
            bytes32 _seed
        )
        internal pure
        returns (uint32[] memory _extraction)
    {
        unchecked {
            uint32[] memory _numbers = new uint32[](_extractions);
            for (uint32 _ix = 0; _ix < _extractions; _ix ++) {
                _numbers[_ix] = _ix;
            }
            _extraction = new uint32[](_extractions);
            for (uint32 _ix = 0; _ix < _extractions; _ix ++) {
                uint256 _random = Witnet.randomUniformUint32(
                    _range - _ix, 
                    _ix, 
                    _seed
                );
                _extraction[_ix] = _numbers[_random];
                _numbers[_random] = _numbers[_extractions - 1 - _ix];
            }
        }
    }
}
