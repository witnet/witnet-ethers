// SPDX-License-Identifier: MIT

pragma solidity >=0.8.0 <0.9.0;

import "@witnet/solidity/contracts/mockups/WitOracleConsumer.sol";$_importWitnetMocks

contract $_contractName
    is
        WitOracleConsumer
{
    using Witnet for Witnet.DataResult;
    using WitnetV2 for Witnet.QuerySLA;
    using WitnetCBOR for WitnetCBOR.CBOR;
    using WitnetCBOR for WitnetCBOR.CBOR[];  
    

    constructor ($_constructorParams) 
        UsingWitOracle($_witnetAddress)
        WitOracleConsumer(/* _callbackGasLimit */ uint24($_callbackGasLimit))
    {
        __witOracleBaseFeeOverheadPercentage = uint16($_baseFeeOverhead);
        // ...
    }

    function __witOraclePostQuery(
            uint256 _witOracleEvmReward,
            bytes calldata _witOracleDataRequestBytecode
        )
        virtual internal returns (uint256)
    {
        return __witOraclePostQuery(
            _witOracleEvmReward, 
            _witOracleDataRequestBytecode,
            __witOracleDefaultSLA
        );
    }

    function __witOraclePostQuery(
            uint256 _witOracleEvmReward,
            bytes calldata _witOracleDataRequestBytecode,
            Witnet.QuerySLA memory _witOracleQuerySLA
        )
        virtual internal returns (uint256)
    {
        return __witOracle.postQuery{
            value: _witOracleEvmReward
        }(
            _witOracleDataRequestBytecode,
            _witOracleQuerySLA,
            Witnet.QueryCallback({
                consumer: address(this),
                gasLimit: __witOracleCallbackGasLimit
            })
        );
    }


    /// ... Introspect the `WitnetConsumer` and the `UsingWitnet` abstract contracts to learn 
    /// ... about the internal helper methods at your disposal for pulling
    /// ... data updates from the Wit/Oracle blockchain.

 
    /// ===============================================================================================================
    /// --- Implementing `IWitOracleConsumer` interface ---------------------------------------------------------------

    /// @notice Method to be called from the WitOracle contract as soon as the given Witnet `queryId` gets reported.
    /// @dev It should revert if called from any other address different to `__witOracle`.
    /// @param _queryId The unique identifier of the Witnet query being reported.
    /// @param _queryResult Struct contaning a Witnet.DataResult metadata and value.
    function reportWitOracleQueryResult(
            Witnet.QueryId _queryId, 
            Witnet.DataResult memory _queryResult
        )
        override external
        onlyFromWitOracle
    {
        // TODO: this method MUST be implemented
        // TODO: gas consumed by this method SHOULD NEVER be greater than $_callbackGasLimit units.
    }
}
