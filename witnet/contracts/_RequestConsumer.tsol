// SPDX-License-Identifier: MIT

pragma solidity >=0.8.0 <0.9.0;

import "@witnet/solidity/contracts/mockups/WitOracleRequestConsumer.sol";$_importWitnetMocks

contract $_contractName
    is
        WitOracleRequestConsumer
{
    using Witnet for Witnet.DataResult;
    using Witnet for Witnet.QuerySLA;
    using WitnetCBOR for WitnetCBOR.CBOR;
    using WitnetCBOR for WitnetCBOR.CBOR[];  
    
    constructor ($_constructorParams) 
        WitOracleRequestConsumer(
            /* _witOracleRequest */ $_witnetAddress,
            /* _witOracleBaseFeeOverheadPercentage */ uint16($_baseFeeOverhead),
            /* _witOracleCallbackGasLimit */ uint24($_callbackGasLimit)
        )
    {
        // ...
    }

    /// ... Introspect the `WitOracleRequestConsumer` abstract contract to learn 
    /// ... about the internal helper methods at your disposal for pulling
    /// ... data updates from the Wit/Oracle blockchain.

 
    /// ===============================================================================================================
    /// --- Implementing `IWitOracleConsumer` interface ---------------------------------------------------------------

    /// @notice Method to be called from the WitOracle contract as soon as the given Witnet `queryId` gets reported.
    /// @dev It should revert if called from any other address different to `__witOracle`.
    /// @param _queryId The unique identifier of the Witnet query being reported.
    /// @param _queryResult Struct contaning a Witnet.DataResult metadata and value.
    function reportWitOracleQueryResult(
            Witnet.QueryId _queryId, 
            Witnet.DataResult memory _queryResult
        )
        override external
        onlyFromWitOracle
    {
        // TODO: this method MUST be implemented
        // TODO: gas consumed by this method SHOULD NEVER be greater than $_callbackGasLimit units.
    }

}